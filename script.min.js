let financialModel = {
    price: 800,
    cost: 258,
    investment: 1500,
    monthlyExpenses: 51800,
    taxRate: 19.5,
    sales: [],
    exchangeRate: 38
};

google.charts.load('current', {packages: ['corechart']});
google.charts.setOnLoadCallback(initApp);

function initApp() {
    initEventListeners();
    generateSalesInputs(12);
    calculateAll();
}

function initEventListeners() {
    document.getElementById('mainForm').addEventListener('submit', e => {
        e.preventDefault();
        updateMainParams();
        calculateAll();
    });

    document.getElementById('salesContainer').addEventListener('input', e => {
        if(e.target.classList.contains('month-input')) {
            financialModel.sales[e.target.dataset.month] = +e.target.value;
            calculateAll();
        }
    });
}

function updateMainParams() {
    financialModel.price = +document.getElementById('priceInput').value;
    financialModel.cost = +document.getElementById('costInput').value;
    financialModel.investment = +document.getElementById('investmentInput').value;
    financialModel.monthlyExpenses = +document.getElementById('expensesInput').value;
    financialModel.taxRate = +document.getElementById('taxInput').value;
}

function generateSalesInputs(months) {
    const container = document.getElementById('salesContainer');
    container.innerHTML = '';
    
    for(let i = 0; i < months; i++) {
        container.innerHTML += `
            <div class="col-6 col-md-3 mb-3">
                <label>Месяц ${i+1}</label>
                <input type="number" class="form-control month-input" 
                     data-month="${i}" value="${100 + i*10}">
            </div>
        `;
    }
    financialModel.sales = Array.from(document.querySelectorAll('.month-input')).map(i => +i.value);
}

function calculateAll() {
    const results = calculateFinancials();
    updateResults(results);
    drawCharts(results);
}

function calculateFinancials() {
    let total = {
        revenue: 0,
        totalCost: financialModel.investment * financialModel.exchangeRate,
        profitBeforeTax: 0,
        profitAfterTax: 0,
        unitsSold: 0
    };

    financialModel.sales.forEach((units, index) => {
        const monthlyRevenue = units * financialModel.price;
        const monthlyCost = (units * financialModel.cost) + financialModel.monthlyExpenses;
        
        total.revenue += monthlyRevenue;
        total.totalCost += monthlyCost;
        total.profitBeforeTax += monthlyRevenue - monthlyCost;
        total.unitsSold += units;
    });

    total.profitAfterTax = total.profitBeforeTax * (1 - (financialModel.taxRate/100));
    total.breakEven = Math.ceil(financialModel.monthlyExpenses / 
                            (financialModel.price - financialModel.cost));
    total.roi = ((total.profitAfterTax / (financialModel.investment * financialModel.exchangeRate)) * 100).toFixed(1);

    return total;
}

function updateResults(data) {
    document.getElementById('totalRevenue').innerHTML = `${formatCurrency(data.revenue)} ₴`;
    document.getElementById('netProfit').innerHTML = `${formatCurrency(data.profitAfterTax)} ₴`;
    document.getElementById('breakEven').innerHTML = `${data.breakEven} шт/мес`;
    document.getElementById('roi').innerHTML = `${data.roi}%`;
    document.getElementById('totalSales').innerHTML = data.unitsSold.toLocaleString();
}

function drawCharts(data) {
    drawMainChart(data);
    drawMetricsChart(data);
}

function drawMainChart(data) {
    const chartData = new google.visualization.DataTable();
    chartData.addColumn('string', 'Месяц');
    chartData.addColumn('number', 'Продажи');
    chartData.addColumn('number', 'Доход');
    chartData.addColumn('number', 'Прибыль');

    financialModel.sales.forEach((units, index) => {
        const revenue = units * financialModel.price;
        const profit = revenue - (units * financialModel.cost) - financialModel.monthlyExpenses;
        chartData.addRow([`М${index+1}`, units, revenue, profit]);
    });

    const options = {
        title: 'Динамика показателей по месяцам',
        curveType: 'function',
        legend: {position: 'bottom'},
        colors: ['#6c5ce7', '#00b894', '#d63031'],
        hAxis: {title: 'Месяц'},
        vAxis: {title: 'Сумма (₴)'}
    };

    new google.visualization.LineChart(
        document.getElementById('mainChart')
    ).draw(chartData, options);
}

function drawMetricsChart(data) {
    const metricData = google.visualization.arrayToDataTable([
        ['Показатель', 'Значение', {role: 'annotation'}],
        ['Выручка', data.revenue, formatCurrency(data.revenue)],
        ['Расходы', data.totalCost, formatCurrency(data.totalCost)],
        ['Прибыль до налогов', data.profitBeforeTax, formatCurrency(data.profitBeforeTax)],
        ['Чистая прибыль', data.profitAfterTax, formatCurrency(data.profitAfterTax)]
    ]);

    const options = {
        title: 'Финансовые результаты',
        legend: 'none',
        bar: {groupWidth: '90%'},
        colors: ['#6c5ce7'],
        vAxis: {format: 'short'}
    };

    new google.visualization.BarChart(
        document.getElementById('metricsChart')
    ).draw(metricData, options);
}

function formatCurrency(value) {
    return (value/1000).toLocaleString('uk-UA', {maximumFractionDigits: 1}) + 'k';
}